package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	gqlModel "ozon-test/internal/gql/model"
	"ozon-test/internal/models"
	"time"

	"github.com/google/uuid"
	"golang.org/x/exp/slog"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, userID string) (*gqlModel.Post, error) {
	post := models.Post{
		ID:            uuid.New(),
		Title:         title,
		Content:       content,
		UserID:        uuid.MustParse(userID),
		AllowComments: true,
		CreatedAt:     time.Now(),
	}

	err := r.Storage.CreatePost(ctx, post)
	if err != nil {
		slog.Error("Failed to create post", "error", err)
		return nil, err
	}

	slog.Info("Post created", "postID", post.ID)

	return &gqlModel.Post{
		ID:            post.ID.String(),
		Title:         post.Title,
		Content:       post.Content,
		UserID:        post.UserID.String(),
		AllowComments: post.AllowComments,
		CreatedAt:     post.CreatedAt.Format(time.RFC3339),
	}, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID string, parentID *string, content string, userID string) (*gqlModel.Comment, error) {
	comment := models.Comment{
		ID:        uuid.New(),
		PostID:    uuid.MustParse(postID),
		Content:   content,
		UserID:    uuid.MustParse(userID),
		CreatedAt: time.Now(),
	}

	if parentID != nil {
		parsedParentID := uuid.MustParse(*parentID)
		comment.ParentID = &parsedParentID
	}

	err := r.Storage.CreateComment(ctx, comment)
	if err != nil {
		slog.Error("Failed to create comment", "error", err)
		return nil, err
	}

	// Publish the new comment to subscribers
	r.PubSub.Publish(ctx, uuid.MustParse(postID), comment.ID.String())

	slog.Info("Comment created", "commentID", comment.ID)

	return &gqlModel.Comment{
		ID:        comment.ID.String(),
		PostID:    comment.PostID.String(),
		ParentID:  parentID,
		Content:   comment.Content,
		UserID:    comment.UserID.String(),
		CreatedAt: comment.CreatedAt.Format(time.RFC3339),
	}, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, title *string, content *string, allowComments *bool) (*gqlModel.Post, error) {
	postID := uuid.MustParse(id)
	post, err := r.Storage.GetPostByID(ctx, postID)
	if err != nil {
		slog.Error("Failed to get post by ID", "error", err, "postID", postID)
		return nil, err
	}

	if title != nil {
		post.Title = *title
	}
	if content != nil {
		post.Content = *content
	}
	if allowComments != nil {
		post.AllowComments = *allowComments
	}

	err = r.Storage.UpdatePost(ctx, post)
	if err != nil {
		slog.Error("Failed to update post", "error", err, "postID", postID)
		return nil, err
	}

	slog.Info("Post updated", "postID", postID)

	return &gqlModel.Post{
		ID:            post.ID.String(),
		Title:         post.Title,
		Content:       post.Content,
		UserID:        post.UserID.String(),
		AllowComments: post.AllowComments,
		CreatedAt:     post.CreatedAt.Format(time.RFC3339),
	}, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*gqlModel.Post, error) {
	postID := uuid.MustParse(id)
	post, err := r.Storage.GetPostByID(ctx, postID)
	if err != nil {
		slog.Error("Failed to get post by ID", "error", err, "postID", postID)
		return nil, err
	}

	return &gqlModel.Post{
		ID:            post.ID.String(),
		Title:         post.Title,
		Content:       post.Content,
		UserID:        post.UserID.String(),
		AllowComments: post.AllowComments,
		CreatedAt:     post.CreatedAt.Format(time.RFC3339),
	}, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, page int, pageSize int) ([]*gqlModel.Post, error) {
	posts, err := r.Storage.ListPosts(ctx, page, pageSize)
	if err != nil {
		slog.Error("Failed to list posts", "error", err, "page", page, "pageSize", pageSize)
		return nil, err
	}

	var result []*gqlModel.Post
	for _, post := range posts {
		result = append(result, &gqlModel.Post{
			ID:            post.ID.String(),
			Title:         post.Title,
			Content:       post.Content,
			UserID:        post.UserID.String(),
			AllowComments: post.AllowComments,
			CreatedAt:     post.CreatedAt.Format(time.RFC3339),
		})
	}

	slog.Info("Listed posts", "page", page, "pageSize", pageSize)

	return result, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, postID string, page int, pageSize int) ([]*gqlModel.Comment, error) {
	comments, err := r.Storage.GetCommentsByPostID(ctx, uuid.MustParse(postID), page, pageSize)
	if err != nil {
		slog.Error("Failed to get comments by post ID", "error", err, "postID", postID)
		return nil, err
	}

	var result []*gqlModel.Comment
	for _, comment := range comments {
		parentID := ""
		if comment.ParentID != nil {
			parentID = comment.ParentID.String()
		}

		result = append(result, &gqlModel.Comment{
			ID:        comment.ID.String(),
			PostID:    comment.PostID.String(),
			ParentID:  &parentID,
			Content:   comment.Content,
			UserID:    comment.UserID.String(),
			CreatedAt: comment.CreatedAt.Format(time.RFC3339),
		})
	}

	slog.Info("Listed comments for post", "postID", postID, "page", page, "pageSize", pageSize)

	return result, nil
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *gqlModel.Comment, error) {
	postUUID := uuid.MustParse(postID)
	events := make(chan *gqlModel.Comment, 1)

	commentsChan, err := r.PubSub.Subscribe(ctx, postUUID)
	if err != nil {
		slog.Error("Failed to subscribe to comments", "error", err, "postID", postID)
		return nil, err
	}

	go func() {
		defer close(events)
		for {
			select {
			case <-ctx.Done():
				return
			case commentID, ok := <-commentsChan:
				if !ok {
					return
				}
				commentUUID := uuid.MustParse(commentID)
				comment, err := r.Storage.GetCommentByID(ctx, commentUUID)
				if err != nil {
					slog.Warn("Failed to get comment by ID", "error", err, "commentID", commentUUID)
					continue
				}

				events <- &gqlModel.Comment{
					ID:     comment.ID.String(),
					PostID: comment.PostID.String(),
					ParentID: func() *string {
						if comment.ParentID != nil {
							id := comment.ParentID.String()
							return &id
						} else {
							return nil
						}
					}(),
					Content:   comment.Content,
					UserID:    comment.UserID.String(),
					CreatedAt: comment.CreatedAt.Format(time.RFC3339),
				}
			}
		}
	}()

	slog.Info("Subscribed to comments", "postID", postID)

	return events, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
